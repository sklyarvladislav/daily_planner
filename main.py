import asyncio
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ --------------------
TOKEN = "8493460424:AAHn3RYrdevCssLtvqwU4X_XxbQ8BITZD_0"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# -------------------- Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è --------------------
scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(
    "dailyplanner-475406-c4c53085245d.json", scope
)
client = gspread.authorize(creds)
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1pReZ9Vl7AzOIwb-vLBf87R6BzHy1TkBz4wDkFLwZPUg/edit"
).sheet1

# -------------------- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∫–æ–ª–æ–Ω–∫–∞–º --------------------
day_col = {
    0: 2,   # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ -> –∫–æ–ª–æ–Ω–∫–∞ B
    1: 4,   # –í—Ç–æ—Ä–Ω–∏–∫ -> –∫–æ–ª–æ–Ω–∫–∞ D
    2: 6,   # –°—Ä–µ–¥–∞ -> –∫–æ–ª–æ–Ω–∫–∞ F
    3: 8,   # –ß–µ—Ç–≤–µ—Ä–≥ -> –∫–æ–ª–æ–Ω–∫–∞ H
    4: 10,  # –ü—è—Ç–Ω–∏—Ü–∞ -> –∫–æ–ª–æ–Ω–∫–∞ J
    5: 12,  # –°—É–±–±–æ—Ç–∞ -> –∫–æ–ª–æ–Ω–∫–∞ L
    6: 14,  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ -> –∫–æ–ª–æ–Ω–∫–∞ N
}

def get_today_column():
    today = datetime.datetime.today().weekday()  # 0 = Monday
    return day_col[today]

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start --------------------
@dp.message()
async def start_handler(message: Message):
    if message.text != "/start":
        return

    col = get_today_column()
    tasks = sheet.col_values(col)[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    tasks = [(i + 2, task) for i, task in enumerate(tasks) if task.strip()]

    if not tasks:
        await message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç üéâ")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=task, callback_data=f"done_{row_index}")]
        for row_index, task in tasks
    ])

    await message.answer("–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=keyboard)

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ --------------------
@dp.callback_query()
async def mark_done_callback(callback: CallbackQuery):
    if not callback.data.startswith("done_"):
        return

    row = int(callback.data.split("_")[1])
    col = get_today_column()

    # –°—Ç–∞–≤–∏–º ‚úÖ –≤ —Å–æ—Å–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–µ
    sheet.update_cell(row, col + 1, "true")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    task_text = sheet.cell(row, col).value

    await callback.answer("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ")
    await bot.send_message(callback.from_user.id, f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task_text}")

# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))

